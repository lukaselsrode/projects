XSS - Returning unsanttized input 
CSRF - Cross-site request forgery 
	- use this exploit to steal sensiutive information from the target 

Stored XSS
_____________
	-  Most Serious 
    - i.e a hacker makes a comment with hidden code in it because the server takes inputs directly from text

- example: Comments on poorly designed websites (Normally it is JS)
++++++++++++++++++++++++++++++++++++++++++++++++
<comment>				                   | 
  	text('Hi I am un-assuming text');      |
<script>				                   |
	malicious_code();		               |
</script>				                   |
</comment>				                   |
++++++++++++++++++++++++++++++++++++++++++++++++



Reflected XSS
______________
- The server, is not involved it is when the input goes back to the user who inputed
- Normally this is stored as a key in a URL or something 


DOM-Based XSS - ('Document Object Model')
______________
 - DOM is a common interpreter for web scripts
 - you can inject malicious scripts
  -->  A COMPLETELY CLIENT SIDE ATTACK 
 0- send link with malware 
 1- victim opens link 
 2 - victim's browser requests server 
 3- Server responds with a page 
 4- victim's browser loads JS malware and executes the payload


IDENTIFYING XSS 
__________________

'Proof of concept payload' (POC)
 - a POC payload will demonstrate that an issue exists without causing damage.

Example:
<script>alert(1);</script>

- pop ups can show ^^^

Some interpreters, will remove the <script> tags however you can get around them
with some creative solutions such as:

<img src="X" onerror=alert(1);>
<b onmouseover=alert(1)>click me!</b>
<body onload=alert('test1')>
<b onload="alert(1)"></b>

How to protect: 
    - you can sanatize the charecters:
        - < , > , " , = 


    - instead of replacing chars or removing them you can also replace them with HTML-encoded versions of themselves 
        - They can't affect the page after
    
CROSS-SITE REQUEST FORGERY: 
    - focuses on exploiting poor-session controls and session managment 
If the developers didnâ€™t consider the impact of cross-site request forgery attacks, 
a threat actor may be able to create a new password link and send it to the user. 
When the user opens the link, they would initiate the password change, but with the attacker-supplied password! 
This would allow a hacker to take over their account!

Mitigate using a CSRF token. 